<?php

namespace TBStatBundle\Repository\MySQL;


use TBStatBundle\Repository\TBStatRepositoryBase;

use TBStatBundle\Tools\TBTelemetry\PostgreSQL;
use TBStatBundle\Tools\TBTelemetryTools;
use TBStatBundle\Entity\MySQL;


/**
 * TBTelemetryStatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TBTelemetryStatRepository extends TBStatRepositoryBase
{

    public function update($tbDeviceID, $deviceValueName, $day=-1){

        $emPgSQL = $this->container->get('doctrine')->getManager('things_board_telemetry_pgsql');
        
        $TBTelemetryStatSumByDay = new PostgreSQL\TBTelemetryStatSumByDay($emPgSQL);
        
        if ( is_array($day) && count($day) == 0  ) $day=-1;
        
        $statDay = $day;
        if ( !is_array($day) && $day < 0) {
            $statDay = TBTelemetryTools::getNowDay();             
        }
        
        $TBTelemetryStatSumByDay->getMainCondition()->setTBEntityId(TBTelemetryTools::getTestDeviceId($this->container,"$tbDeviceID"))
                ->setTBValueName("$deviceValueName")->setTBTs($statDay);
        
        $result = $TBTelemetryStatSumByDay->run();
        
        $setterToFieldNames = array('setDayTs'=>'epoch_day','setTbId'=>'entity_id','setTbName'=>'entity_type','setValueName'=>'field_name','setValue'=>'field_value');
        
        $this->_updateARfromArray($result,MySQL\TBTelemetryStat::class,function($sourceRow){
            return(
                array(
                    'day_ts'=>$sourceRow['epoch_day'], 'tb_id'=>$sourceRow['entity_id'],
                    'tb_name'=>$sourceRow['entity_type'],'value_name'=>$sourceRow['field_name'] 
                )
            );
        },$setterToFieldNames);
        
        
    }

    /**
     * Make update of sum by days in range from $dayBegin to $dayEnd.
     * 
     * if $dayEnd is null (by default) then will used data that start from $dayBegin without any limitation for
     * last day of range. But if $dayEnd exists and less than $dayBegin then will used current day as last day of range. 
     * Otherwise will used exact $dayEnd.
     * 
     * if $dayBegin less or equal 0 then will used current minus 30 days as first day of range.
     * Same for null or other value that will return by function intval(...) as 0. 
     * Otherwise will use exact value of $dayBegin. 
     * 
     * @param string $tbDeviceID
     * @param string $deviceValueName
     * @param integer $dayBegin
     * @param integer $dayEnd
     */
    public function updateByInterval($tbDeviceID, $deviceValueName, $dayBegin, $dayEnd = null ){

        $emPgSQL = $this->container->get('doctrine')->getManager('things_board_telemetry_pgsql');
        $TBTelemetryStatSumByInterval = new PostgreSQL\TBTelemetryStatSumByInterval($emPgSQL);
        
        $dayBegin = intval($dayBegin);
        if ($dayBegin <= 0) $dayBegin= TBTelemetryTools::getNowDay() - 30;
        $statDay = array('DayBegin'=>$dayBegin);
        
        if (!is_null($dayEnd)) {
            $dayEnd = intval($dayEnd);
            if ($dayBegin > $dayEnd) $dayEnd = TBTelemetryTools::getNowDay();
            $statDay['DayEnd'] = $dayEnd;
        }
        
        $TBTelemetryStatSumByInterval->getMainCondition()->setTBEntityId("$tbDeviceID")
                ->setTBValueName("$deviceValueName")->setTBTs($statDay);
        
        $result = $TBTelemetryStatSumByInterval->run();
        
        $setterToFieldNames = array('setDayTs'=>'epoch_day','setTbId'=>'entity_id','setTbName'=>'entity_type','setValueName'=>'field_name','setValue'=>'field_value');
        
        $this->_updateARfromArray($result,MySQL\TBTelemetryStat::class,function($sourceRow){
            return(
                array(
                    'day_ts'=>$sourceRow['epoch_day'], 'tb_id'=>$sourceRow['entity_id'],
                    'tb_name'=>$sourceRow['entity_type'],'value_name'=>$sourceRow['field_name'] 
                )
            );
        },$setterToFieldNames);

    }

    
    public function getAverageStatData($tbDeviceID='', $deviceValueName='', $dayBegin = null, $dayEnd = null){

        $tbDeviceID = trim("$tbDeviceID");
        $deviceValueName = trim("$deviceValueName");

        $where = array();
        if ( "$tbDeviceID" !== '' ) $where["tbs.tb_id = :TbId"] = array(':TbId'=>$tbDeviceID);
        if ( "$deviceValueName" !== '' ) $where["tbs.value_name = :ValueName"] = array(':ValueName'=>$deviceValueName);
        
        $addWhereStr = '';
        $andStmnt = "\r\n".' AND ';
        $paramsAll = array(
            ':DayTs'=>TBTelemetryTools::getDayWisely($dayBegin),
            ':DayTsEnd'=>TBTelemetryTools::getDayWisely($dayEnd)
        );
        foreach ($where as $wherePart=>$params){
            $addWhereStr .=  $wherePart.$andStmnt;
            $paramsAll = array_merge($paramsAll,$params);
        }
        
        if ($addWhereStr !== '') $addWhereStr = substr($addWhereStr,0,-strlen($andStmnt));
            
$sql = '
SELECT tbs.tb_id, tbs.tb_name, tbs.value_name,
    AVG(
      ( SELECT `value` as last_val
        FROM tbtools.tb_telemetry_stat
        WHERE day_ts >= :DayTs
         AND day_ts <= :DayTsEnd
         AND tbs.tb_id = tb_id and tbs.value_name = value_name
        ORDER BY day_ts DESC
        LIMIT 1
      )
    ) as last_val,
    AVG(tbs.value) as avg_val,
    STDDEV_POP(tbs.value) as standart_deviation
FROM tbtools.tb_telemetry_stat tbs
WHERE tbs.day_ts >= :DayTs '."\r\n".
' AND tbs.day_ts <= :DayTsEnd'."\r\n".( $addWhereStr !== '' ?  ' AND '.$addWhereStr."\r\n" : '' ).
'GROUP BY tbs.tb_id, tbs.tb_name, tbs.value_name';
        
        $result = $this->connection->fetchAll($sql,$paramsAll);
        return($result);
    }


    
}
